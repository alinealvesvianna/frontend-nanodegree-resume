# dot notation
O objeto pode acessar uma propriedade apenas por um ponto, ao invés de declarar uma variável.

- objeto
  var bio = {};

- setando nova propriedade no objeto existente
  bio.propriedadeNovaCriada = "banana"

- anexando informacão no DOM
$("#main").append(work.currentJob);


## brackets notation

O objeto pode acessar uma propriedade através de colchetes

- objeto
  var education = {};

- setando nova propriedade no objeto existente
  education["propriedadeNovaCriada"] = "Udacity";

- anexando informacão no DOM
$("#main").append(education["nameOfScholl"]);


if (bio.skills.length > 0) {
    $("#header").append(HTMLskillsStart);
    var skillsFormatadas = bio.skills.forEach(function(item, index, array) {
        HTMLskills.replace("%data%", bio.skills);
    });
    $("#skills").append(skillsFormatadas);
}

### Loop

- tipos de array : https://udacity.github.io/frontend-nanodegree-styleguide/javascript.html#for-in-loop
- loop usado para objetos ou arrays. Se usado num objeto que tem um array dentro, é importante indicar o index do array, senão ele se perde

job é igual ao index

for (job in work.jobs) {
    $("#workExperience").append(HTMLworkStart);
    var empregadorFormadato = HTMLworkEmployer.replace("%data%", work.jobs[job].employer);
    var tituloEmpregoFormadato = HTMLworkTitle.replace("%data%", work.jobs[job].title);
    var empregadorTituloFormatado = empregadorFormadato + tituloEmpregoFormadato;
    var dataEmpregoFormadato = HTMLworkDates.replace("%data%", work.jobs[job].dates);
    var LocalEmpregoFormadato = HTMLworkLocation.replace("%data%", work.jobs[job].location);
    var DescricaoEmpregoFormadato = HTMLworkDescription.replace("%data%", work.jobs[job].description);

    $(".work-entry:last").append(empregadorTituloFormatado).append(dataEmpregoFormadato).append(LocalEmpregoFormadato).append(DescricaoEmpregoFormadato);
}


#### Escopo de função

- mais detalhes em : https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/



##### Documentação jQuery

- Parâmetros são opcionais quando existem colchetes no metódo
Ex.: parents([selectors])


######## Document Ready jQuery
Uma função passada para o objeto jQuery é executada em document.ready, que ocorre após o carregamento de DOM.

Por que isso é útil?
Os arquivos JavaScript externos no <head> de um documento costumam ser baixados antes de os arquivos JavaScript serem incluídos no <body>. Os arquivos JavaScript também são executados imediatamente no seu local no documento. Ou seja, eles não podem acessar elementos DOM que vêm após a tag <script> no DOM. Isso leva a algumas situações interessantes.

Imagine que você está criando um site e tem um script que deseja executar em elementos DOM da página. Se você incluir o script no <head> normalmente, ele será executado logo após ser baixado, o que ocorrerá antes de o DOM criar os elementos onde o script será executado. Na verdade, o script não poderia fazer nada.

Você pode incluir o script na parte inferior do <body>, mas isso significa que o download pode potencialmente iniciar depois no processo de carregamento, retardando a renderização da primeira página.

O que você pode fazer?

Passe a função para o objeto jQuery, desta forma:

function someFunction() {
    // Fazer algo interessante
}
$(someFunction)
ou

$(function(){
    // Fazer algo interessante
})


########## Monitorando funções no inspect
 - Pode passar como parâmetro o elemento que se quer monitorar

monitorEvents(elementoMonitorado);

https://developers.google.com/web/tools/chrome-devtools/console/events?hl=en#monitor-events


############Delegação de eventos

https://classroom.udacity.com/nanodegrees/nd001/parts/0011345406/modules/296281861575461/lessons/5103579406/concepts/50210784590923
https://learn.jquery.com/events/event-delegation/

Os exemplos de observador de eventos do jQuery que estamos consideramos até o momento selecionam os itens de destino usando o jQuery e, em seguida, anexam um observador ao destino diretamente. E quando o destino ainda não existe? Isso pode acontecer em várias situações. Por exemplo, se você tiver uma lista de itens e desejar ouvir cliques em algum deles, o que acontecerá se você adicionar um item de lista extra depois de concluir sua página?

Cuidado ao configurar um observador de eventos e, em seguida, criar o item de destino. Por exemplo:

$( 'article' ).on( 'click', function() {
    $( 'body' ).addClass( 'selected' );
});

$( 'body' ).append( '<article> <h1>Artigo anexo</h1> <p>Conteúdo para o novo artigo </p> </article>' );
Clicar no artigo "anexado" não adicionará uma classe ao corpo pois o artigo "anexado" foi criado após a configuração de observadores do evento. Quando almejamos o "artigo", ele ainda não existia; então, o jQuery adicionou o observador de cliques a todos os ZERO de nossos artigos!

Mas há uma forma de fazer esse cenário funcionar usando a Delegação de Eventos. Ouviremos aos eventos que atingiram um elemento pai e preste atenção ao destino desses eventos. A Delegação de eventos com o jQuery usa o mesmo código que estamos usando, mas transmite um argumento adicional ao método "on".

$( '.container' ).on( 'click', 'article', function() { … });
...este código indica que o jQuery deve observar o elemento .container para cliques e, caso existam, verificar se o alvo do evento de cliques é um elemento article.

Outra vantagem de usar a Delegação de eventos é para a consolidação do número de observadores de eventos. Por exemplo, se você tivesse 1.000 itens da lista em uma página:

<ul id="rooms">
    <li>Sala 1</li>
    <li>Sala 2</li>
            .
            .
            .
    <li>Sala 999</li>
    <li>Sala 1000</li>
    </ul>
O código a seguir configuraria um observador de eventos para cada 1.000 observadores de eventos - um para cada item da lista... são 1.000 observadores de eventos!

$( '#rooms li' ).on( 'click', function() {
    ...
});
Como alternativa, podemos usar a delegação de eventos do jQuery para definir o observador de eventos em apenas um elemento (o ul#rooms) e verificar se o elemento alvo é um item da lista;

$( '#rooms' ).on( 'click', 'li', function() {
    ...
});
